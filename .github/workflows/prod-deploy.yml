name: PROD Deploy (Manual)

on:
  workflow_dispatch:
    inputs:
      deployType:
        description: "Choose deploy type"
        required: true
        default: "release"
        type: choice
        options:
          - release # QA → PROD
          - hotfix # HOTFIX → PROD

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" >> .env
          echo "GIST_URL=${{ secrets.GIST_URL }}" >> .env

      # 🔧 HOTFIX인 경우 → patch +1
      - name: Bump Patch Version
        if: ${{ github.event.inputs.deployType == 'hotfix' }}
        id: hotfix_version
        run: |
          jq '.patch += 1' version.json > version.tmp.json
          mv version.tmp.json version.json

          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add version.json
          git commit -m "🔁 Bump patch version (hotfix)"
          git push

          MAJOR=$(jq -r '.major' version.json)
          MINOR=$(jq -r '.minor' version.json)
          PATCH=$(jq -r '.patch' version.json)
          VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 New HOTFIX version: $VERSION"

      # 🚀 release인 경우 → QA 버전 그대로
      - name: Use QA Version
        if: ${{ github.event.inputs.deployType == 'release' }}
        id: release_version
        run: |
          MAJOR=$(jq -r '.major' version.json)
          MINOR=$(jq -r '.minor' version.json)
          PATCH=$(jq -r '.patch' version.json)
          VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Release version: $VERSION"

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build & Push PROD Image
        run: |
          VERSION="${{ steps.hotfix_version.outputs.version || steps.release_version.outputs.version }}"
          IMAGE=${{ secrets.DOCKER_USERNAME }}/nextjs-app

          echo "📦 Building PROD image: $IMAGE:prod-${VERSION}"

          docker build -f Dockerfile \
            -t $IMAGE:prod-${VERSION} \
            -t $IMAGE:prod-latest .

          docker push $IMAGE:prod-${VERSION}
          docker push $IMAGE:prod-latest
