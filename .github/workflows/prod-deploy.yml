name: PROD Deploy (Manual)

on:
  workflow_dispatch:
    inputs:
      deployType:
        description: "Choose deploy type"
        required: true
        default: "release"
        type: choice
        options:
          - release # QA â†’ PROD
          - hotfix # HOTFIX â†’ PROD

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: prod

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" >> .env
          echo "GIST_URL=${{ secrets.GIST_URL }}" >> .env

      - name: Determine PROD version
        id: version
        run: |
          git fetch --tags

          if [[ "${{ github.event.inputs.deployType }}" == "hotfix" ]]; then
            LATEST=$(git tag --list "v*" --sort=-v:refname | head -n 1)
            echo "Latest tag: $LATEST"

            if [[ "$LATEST" == "" ]]; then
              VERSION="1.0.1"
            else
              IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST#v}"
              PATCH=$((PATCH + 1))
              VERSION="$MAJOR.$MINOR.$PATCH"
            fi
          else
            LATEST_QA=$(git tag --list "qa-v*" --sort=-v:refname | head -n 1)
            VERSION="${LATEST_QA#qa-v}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag (vX.X.X)
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build & Push PROD Image
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          IMAGE=${{ secrets.DOCKER_USERNAME }}/nextjs-app

          echo "ðŸ“¦ Building PROD image: $IMAGE:prod-${VERSION}"

          docker build -f Dockerfile \
            -t $IMAGE:prod-${VERSION} \
            -t $IMAGE:prod-latest .

          docker push $IMAGE:prod-${VERSION}
          docker push $IMAGE:prod-latest
