name: PROD Deploy

on:
  push:
    branches:
      - prod

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" >> .env
          echo "GIST_URL=${{ secrets.GIST_URL }}" >> .env

      - name: Extract Branch Name
        id: branch
        run: |
          BRANCH_NAME=$(echo "${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}")
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "ðŸ“Œ Current branch: $BRANCH_NAME"

      # ðŸŽ¯ HOTFIX â†’ PROD
      - name: Extract Hotfix Version
        if: ${{ startsWith(steps.branch.outputs.branch, 'hotfix/') }}
        id: hotfix_version
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
          PATCH=$((PATCH + 1))
          VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ðŸ“Œ HOTFIX version: $VERSION"

      # ðŸš€ QA â†’ PROD
      - name: Extract QA Version
        if: ${{ !startsWith(steps.branch.outputs.branch, 'hotfix/') }}
        id: qa_version
        run: |
          MAJOR=$(jq -r '.major' version.json)
          MINOR=$(jq -r '.minor' version.json)
          PATCH=$(jq -r '.patch' version.json)
          VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ðŸ“Œ QA version: $VERSION"

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build & Push PROD Image
        run: |
          VERSION="${{ steps.hotfix_version.outputs.version || steps.qa_version.outputs.version }}"
          IMAGE=${{ secrets.DOCKER_USERNAME }}/nextjs-app

          echo "ðŸ“¦ Building PROD image: $IMAGE:prod-${VERSION}"

          docker build -f Dockerfile \
            -t $IMAGE:prod-${VERSION} \
            -t $IMAGE:prod-latest .

          docker push $IMAGE:prod-${VERSION}
          docker push $IMAGE:prod-latest
