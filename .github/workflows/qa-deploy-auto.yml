name: QA Deploy (Auto)

on:
  pull_request:
    branches:
      - qa
    types:
      - closed

run-name: QA Deploy (Auto)

permissions:
  contents: write

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout QA branch
        uses: actions/checkout@v3
        with:
          ref: qa
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" >> .env
          echo "GIST_URL=${{ secrets.GIST_URL }}" >> .env

      - name: Determine version update type
        id: determine
        run: |
          HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"

          if [[ "$HEAD_BRANCH" == "main" ]]; then
            echo "version_type=minor" >> $GITHUB_ENV
          elif [[ "$HEAD_BRANCH" =~ ^[0-9]+-fix/.*$ ]]; then
            echo "version_type=patch" >> $GITHUB_ENV
          else
            echo "‚ùå ÏòàÏÉÅÌïòÏßÄ Î™ªÌïú Î∏åÎûúÏπò: $HEAD_BRANCH"
            exit 1
          fi
      - name: Calculate QA version from Git tags
        id: version
        run: |
          git fetch --tags

          LATEST=$(git tag --list "qa-v*" --sort=-v:refname | head -n 1)
          echo "Latest tag: $LATEST"

          if [[ "$LATEST" == "" ]]; then
            VERSION="1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST#qa-v}"
            if [[ "$version_type" == "minor" ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi
            VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üìå Calculated version: $VERSION"

      - name: Create Git Tag (qa-vX.X.X)
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag qa-v${{ steps.version.outputs.version }}
          git push origin qa-v${{ steps.version.outputs.version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push QA Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nextjs-docker
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "üì¶ Building image: $ECR_REGISTRY/$ECR_REPOSITORY:qa-${VERSION}"

          docker build -f Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:qa-${VERSION} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:qa-latest .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:qa-${VERSION}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:qa-latest
