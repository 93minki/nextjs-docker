name: QA Deploy (Manual)

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: "Patch or Minor update?"
        required: true
        default: "minor"
        type: choice
        options:
          - patch
          - minor

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: qa

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" >> .env
          echo "GIST_URL=${{ secrets.GIST_URL }}" >> .env

      - name: Calculate QA version
        id: version
        run: |
          git fetch --tags

          LATEST=$(git tag --list "qa-v*" --sort=-v:refname | head -n 1)
          echo "Latest tag: $LATEST"

          if [[ "$LATEST" == "" ]]; then
            VERSION="1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST#qa-v}"
            if [[ "${{ github.event.inputs.versionType }}" == "minor" ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi
            VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag (qa-vX.X.X)
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag qa-v${{ steps.version.outputs.version }}
          git push origin qa-v${{ steps.version.outputs.version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push QA Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nextjs-docker
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "ðŸ“¦ Building image: $ECR_REGISTRY/$ECR_REPOSITORY:qa-${VERSION}"

          docker build -f Dockerfile \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:qa-${VERSION} \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:qa-latest .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:qa-${VERSION}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:qa-latest
