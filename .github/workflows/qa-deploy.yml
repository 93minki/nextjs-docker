name: QA Deploy (Manual)

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: "Patch or Minor update?"
        required: true
        default: "minor"
        type: choice
        options:
          - patch
          - minor

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" >> .env
          echo "GIST_URL=${{ secrets.GIST_URL }}" >> .env

      - name: Calculate QA version
        id: version
        run: |
          LATEST=$(git tag --list "qa-v*" --sort=-v:refname | head -n 1)
          echo "Latest tag: $LATEST"

          if [[ "$LATEST" == "" ]]; then
            VERSION="1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST#qa-v}"
            if [[ "${{ github.event.inputs.versionType }}" == "minor" ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi
            VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag (qa-vX.X.X)
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag qa-v${{ steps.version.outputs.version }}
          git push origin qa-v${{ steps.version.outputs.version }}

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build & Push QA Docker Image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/nextjs-app
          echo "ðŸ“¦ Building image: $IMAGE:qa-${version}"

          docker build -f Dockerfile \
            -t $IMAGE:qa-${version} \
            -t $IMAGE:qa-latest .

          docker push $IMAGE:qa-${version}
          docker push $IMAGE:qa-latest
